import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/message.dart';
import '../models/agent.dart';
import '../models/resource.dart';

class OptimizedChatService {
  static const String _chatHistoryKey = 'chat_history';
  static const String _agentResponsesKey = 'agent_responses';
  static const int _maxCacheAge = 24 * 60; // 24 heures en minutes

  /// Get agent response with caching
  Future<Message> getAgentResponse(
    String userMessage,
    Agent agent,
    MessageType messageType,
  ) async {
    try {
      // V√©rifier le cache d'abord
      final cachedResponse = await _getCachedResponse(userMessage, agent);
      if (cachedResponse != null) {
        print('‚úÖ R√©ponse agent r√©cup√©r√©e du cache');
        return cachedResponse;
      }

      // Simulate network delay
      await Future.delayed(const Duration(seconds: 1));

      String response = '';
      MessageType responseType = MessageType.text;

      switch (agent.role) {
        case AgentRole.maestro:
          response = _getMaestroResponse(userMessage);
          break;
        case AgentRole.nutrition:
          response = _getNutritionResponse(userMessage);
          break;
        case AgentRole.coach:
          response = _getCoachResponse(userMessage);
          break;
        case AgentRole.community:
          response = _getCommunityResponse(userMessage);
          break;
      }

      final agentMessage = Message(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        content: response,
        type: responseType,
        sender: agent,
        isUser: false,
        timestamp: DateTime.now(),
      );

      // Sauvegarder en cache
      await _cacheResponse(userMessage, agent, agentMessage);

      return agentMessage;
    } catch (e) {
      print('‚ùå Erreur dans getAgentResponse: $e');
      return Message(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        content:
            'D√©sol√©, je ne peux pas r√©pondre pour le moment. Veuillez r√©essayer.',
        type: MessageType.text,
        sender: agent,
        isUser: false,
        timestamp: DateTime.now(),
      );
    }
  }

  /// Sauvegarder une r√©ponse en cache
  Future<void> _cacheResponse(
      String userMessage, Agent agent, Message response) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final cacheKey = '${agent.role.name}_${_hashMessage(userMessage)}';

      final cacheData = {
        'userMessage': userMessage,
        'agentRole': agent.role.name,
        'response': response.toJson(),
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      };

      // R√©cup√©rer le cache existant
      final existingCache = prefs.getString(_agentResponsesKey);
      Map<String, dynamic> cache = {};

      if (existingCache != null) {
        cache = jsonDecode(existingCache);
      }

      // Ajouter la nouvelle r√©ponse
      cache[cacheKey] = cacheData;

      // Nettoyer le cache ancien
      cache = _cleanOldCacheEntries(cache);

      // Sauvegarder
      await prefs.setString(_agentResponsesKey, jsonEncode(cache));
      print('‚úÖ R√©ponse sauvegard√©e en cache');
    } catch (e) {
      print('‚ùå Erreur sauvegarde cache: $e');
    }
  }

  /// R√©cup√©rer une r√©ponse du cache
  Future<Message?> _getCachedResponse(String userMessage, Agent agent) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final cacheKey = '${agent.role.name}_${_hashMessage(userMessage)}';

      final existingCache = prefs.getString(_agentResponsesKey);
      if (existingCache == null) return null;

      final cache = jsonDecode(existingCache);
      final cachedData = cache[cacheKey];

      if (cachedData == null) return null;

      // V√©rifier l'√¢ge du cache
      final timestamp = cachedData['timestamp'] as int;
      final cacheAge = DateTime.now().millisecondsSinceEpoch - timestamp;
      final cacheAgeMinutes = cacheAge / (1000 * 60);

      if (cacheAgeMinutes > _maxCacheAge) {
        print('‚ö†Ô∏è Cache expir√© (${cacheAgeMinutes.round()} minutes)');
        return null;
      }

      // V√©rifier que le message correspond
      if (cachedData['userMessage'] != userMessage) {
        return null;
      }

      return Message.fromJson(cachedData['response']);
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration cache: $e');
      return null;
    }
  }

  /// Nettoyer les entr√©es anciennes du cache
  Map<String, dynamic> _cleanOldCacheEntries(Map<String, dynamic> cache) {
    final now = DateTime.now().millisecondsSinceEpoch;
    final cleanedCache = <String, dynamic>{};

    cache.forEach((key, value) {
      final timestamp = value['timestamp'] as int;
      final cacheAge = now - timestamp;
      final cacheAgeMinutes = cacheAge / (1000 * 60);

      if (cacheAgeMinutes <= _maxCacheAge) {
        cleanedCache[key] = value;
      }
    });

    return cleanedCache;
  }

  /// Cr√©er un hash simple du message
  String _hashMessage(String message) {
    return message
        .toLowerCase()
        .replaceAll(RegExp(r'[^a-z0-9]'), '')
        .substring(0, 10);
  }

  /// Sauvegarder l'historique de chat
  Future<void> saveChatHistory(List<Message> messages) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final messagesJson = messages.map((msg) => msg.toJson()).toList();

      await prefs.setString(_chatHistoryKey, jsonEncode(messagesJson));
      print('‚úÖ Historique de chat sauvegard√©');
    } catch (e) {
      print('‚ùå Erreur sauvegarde historique: $e');
    }
  }

  /// Charger l'historique de chat
  Future<List<Message>> loadChatHistory() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final historyJson = prefs.getString(_chatHistoryKey);

      if (historyJson == null) return [];

      final messagesList = jsonDecode(historyJson) as List;
      return messagesList.map((msgJson) => Message.fromJson(msgJson)).toList();
    } catch (e) {
      print('‚ùå Erreur chargement historique: $e');
      return [];
    }
  }

  /// Effacer l'historique de chat
  Future<void> clearChatHistory() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_chatHistoryKey);
      print('üóëÔ∏è Historique de chat effac√©');
    } catch (e) {
      print('‚ùå Erreur effacement historique: $e');
    }
  }

  /// Obtenir les statistiques du cache
  Future<Map<String, dynamic>> getCacheStats() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final responsesCache = prefs.getString(_agentResponsesKey);
      final historyCache = prefs.getString(_chatHistoryKey);

      Map<String, dynamic> stats = {
        'responsesCacheExists': responsesCache != null,
        'historyCacheExists': historyCache != null,
      };

      if (responsesCache != null) {
        final cache = jsonDecode(responsesCache);
        stats['cachedResponsesCount'] = cache.length;
      }

      if (historyCache != null) {
        final history = jsonDecode(historyCache);
        stats['historyMessagesCount'] = history.length;
      }

      return stats;
    } catch (e) {
      return {'error': e.toString()};
    }
  }

  // M√©thodes de r√©ponse existantes (optimis√©es)
  String _getMaestroResponse(String userMessage) {
    final lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.contains('hello') || lowerMessage.contains('hi')) {
      return 'Bonjour ! Je suis Maestro, votre orchestrateur de bien-√™tre. Je suis l√† pour vous aider dans votre parcours de m√©nopause. Comment vous sentez-vous aujourd\'hui ?';
    } else if (lowerMessage.contains('nutrition') ||
        lowerMessage.contains('diet') ||
        lowerMessage.contains('food')) {
      return 'Je pense que notre experte en nutrition, Dr. Sarah, serait parfaite pour vous aider. Voulez-vous que je vous connecte avec elle ?';
    } else if (lowerMessage.contains('stress') ||
        lowerMessage.contains('anxiety') ||
        lowerMessage.contains('mood')) {
      return 'Il semble que vous pourriez b√©n√©ficier d\'une conversation avec notre coach de vie, Maria. Elle se sp√©cialise dans le soutien √©motionnel et la gestion du stress. Dois-je vous pr√©senter ?';
    } else if (lowerMessage.contains('community') ||
        lowerMessage.contains('group') ||
        lowerMessage.contains('support')) {
      return 'Notre connectrice communautaire, Lisa, peut vous aider √† trouver des groupes de soutien locaux et des ressources. Voulez-vous vous connecter avec elle ?';
    } else {
      return 'Merci de partager cela avec moi. Je suis l√† pour vous aider √† trouver le bon soutien. Sur quel aspect de votre bien-√™tre souhaitez-vous vous concentrer aujourd\'hui ?';
    }
  }

  String _getNutritionResponse(String userMessage) {
    final lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.contains('hot flash') ||
        lowerMessage.contains('night sweat')) {
      return 'Les bouff√©es de chaleur peuvent √™tre difficiles ! Je recommande d\'incorporer plus de phytoestrog√®nes dans votre alimentation. Essayez d\'ajouter des graines de lin, des produits √† base de soja et des l√©gumineuses. √âvitez √©galement les aliments √©pic√©s et la caf√©ine, surtout le soir. Voulez-vous des suggestions de recettes sp√©cifiques ?';
    } else if (lowerMessage.contains('weight') ||
        lowerMessage.contains('gain')) {
      return 'Les changements de m√©tabolisme pendant la m√©nopause sont courants. Concentrez-vous sur les aliments riches en prot√©ines, en fibres et en graisses saines. Consid√©rez des repas plus petits et plus fr√©quents et restez hydrat√©e. Je peux sugg√©rer des strat√©gies de planification de repas si vous le souhaitez.';
    } else if (lowerMessage.contains('bone') ||
        lowerMessage.contains('calcium')) {
      return 'La sant√© osseuse est cruciale pendant la m√©nopause. Assurez-vous d\'obtenir suffisamment de calcium √† partir des produits laitiers, des l√©gumes verts et des aliments enrichis. La vitamine D est √©galement essentielle - consid√©rez passer du temps √† l\'ext√©rieur et manger du poisson gras.';
    } else {
      return 'La nutrition joue un r√¥le vital dans la gestion des sympt√¥mes de la m√©nopause. Je serais heureuse de cr√©er un plan de repas personnalis√© pour vous. Quels sympt√¥mes sp√©cifiques ressentez-vous ?';
    }
  }

  String _getCoachResponse(String userMessage) {
    final lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.contains('stress') || lowerMessage.contains('anxiety')) {
      return 'Le stress et l\'anxi√©t√© sont tr√®s courants pendant cette transition. Commen√ßons par quelques exercices de respiration. Essayez la technique 4-7-8 : inspirez pendant 4, retenez pendant 7, expirez pendant 8. Comment cela vous fait-il ? Nous pouvons aussi explorer ensemble les pratiques de pleine conscience.';
    } else if (lowerMessage.contains('sleep') ||
        lowerMessage.contains('insomnia')) {
      return 'Les troubles du sommeil sont difficiles. Cr√©ons une routine apaisante au coucher. Essayez d\'aller au lit et de vous r√©veiller √† la m√™me heure quotidiennement, √©vitez les √©crans une heure avant le coucher et cr√©ez un environnement de sommeil frais et sombre. √Ä quoi ressemble votre routine de sommeil actuelle ?';
    } else if (lowerMessage.contains('confidence') ||
        lowerMessage.contains('self-esteem')) {
      return 'Vos sentiments sont valides, et cette transition est une partie naturelle de la vie. Concentrons-nous sur vos forces et ce que vous avez accompli. Quelles sont trois choses dont vous √™tes fi√®re aujourd\'hui ? Nous pouvons travailler ensemble √† d√©velopper l\'auto-compassion.';
    } else {
      return 'Je suis l√† pour vous soutenir √©motionnellement dans ce parcours. L\'exp√©rience de chaque femme est unique, et il est normal d\'avoir des hauts et des bas. Qu\'est-ce qui vous serait le plus utile en ce moment ?';
    }
  }

  String _getCommunityResponse(String userMessage) {
    final lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.contains('group') || lowerMessage.contains('support')) {
      return 'Je peux vous aider √† trouver des groupes de soutien locaux ! Il y a plusieurs options dans votre r√©gion, y compris des communaut√©s en ligne et des rencontres en personne. Voulez-vous que je partage des groupes sp√©cifiques qui se concentrent sur le soutien √† la m√©nopause ?';
    } else if (lowerMessage.contains('doctor') ||
        lowerMessage.contains('specialist')) {
      return 'Trouver le bon fournisseur de soins de sant√© est important. Je peux recommander des sp√©cialistes de la m√©nopause dans votre r√©gion qui sont exp√©riment√©s avec l\'hormonoth√©rapie et la gestion des sympt√¥mes. Voulez-vous des r√©f√©rences ?';
    } else if (lowerMessage.contains('exercise') ||
        lowerMessage.contains('fitness')) {
      return 'Il y a d\'excellents cours de fitness et programmes de bien-√™tre sp√©cialement con√ßus pour les femmes en m√©nopause. De nombreuses salles de sport et centres communautaires offrent des programmes sp√©cialis√©s. Voulez-vous que je trouve des options pr√®s de chez vous ?';
    } else {
      return 'Je suis l√† pour vous connecter avec les ressources et la communaut√© dont vous avez besoin. Que ce soit des groupes de soutien, des fournisseurs de soins de sant√© ou des activit√©s de bien-√™tre, je peux vous aider √† trouver ce qui fonctionne le mieux pour vous. Quel type de soutien recherchez-vous ?';
    }
  }

  Future<List<Resource>> getResources(Agent agent) async {
    // Mock resources based on agent type
    await Future.delayed(const Duration(milliseconds: 500));

    switch (agent.role) {
      case AgentRole.nutrition:
        return [
          Resource(
            id: '1',
            title: 'Plan de repas adapt√© √† la m√©nopause',
            description:
                'Un plan de repas de 7 jours con√ßu pour soutenir l\'√©quilibre hormonal et r√©duire les sympt√¥mes.',
            link: 'https://example.com/meal-plan',
            category: 'Nutrition',
            createdAt: DateTime.now(),
          ),
          Resource(
            id: '2',
            title: 'Guide des aliments riches en phytoestrog√®nes',
            description:
                'Guide complet des aliments qui soutiennent naturellement les niveaux d\'≈ìstrog√®nes.',
            link: 'https://example.com/phytoestrogens',
            category: 'Nutrition',
            createdAt: DateTime.now(),
          ),
        ];
      case AgentRole.coach:
        return [
          Resource(
            id: '3',
            title: 'M√©ditation de pleine conscience pour la m√©nopause',
            description:
                'Sessions de m√©ditation guid√©e sp√©cialement con√ßues pour le soulagement du stress de la m√©nopause.',
            link: 'https://example.com/meditation',
            category: 'Bien-√™tre',
            createdAt: DateTime.now(),
          ),
          Resource(
            id: '4',
            title: 'Liste de v√©rification de l\'hygi√®ne du sommeil',
            description:
                'Conseils pratiques pour am√©liorer la qualit√© du sommeil pendant la m√©nopause.',
            link: 'https://example.com/sleep',
            category: 'Bien-√™tre',
            createdAt: DateTime.now(),
          ),
        ];
      case AgentRole.community:
        return [
          Resource(
            id: '5',
            title: 'Groupes de soutien locaux pour la m√©nopause',
            description:
                'Trouvez des groupes de soutien en personne et en ligne dans votre r√©gion.',
            link: 'https://example.com/groups',
            category: 'Communaut√©',
            createdAt: DateTime.now(),
          ),
          Resource(
            id: '6',
            title: 'R√©pertoire des sp√©cialistes de la m√©nopause',
            description:
                'Fournisseurs de soins de sant√© v√©rifi√©s sp√©cialis√©s dans les soins de la m√©nopause.',
            link: 'https://example.com/specialists',
            category: 'Soins de sant√©',
            createdAt: DateTime.now(),
          ),
        ];
      default:
        return [];
    }
  }
}
