import '../services/cycle_analysis_service.dart';

/// Exemple d'utilisation du CycleAnalysisService
class CycleAnalysisExample {
  static Future<void> demonstrateAnalysis() async {
    print('üöÄ D√©monstration du CycleAnalysisService\n');

    final service = CycleAnalysisService();

    // 1. G√©n√©rer des donn√©es de test
    print('üìä G√©n√©ration de donn√©es de test...');
    final testData = service.generateTestData();
    print('‚úÖ ${testData.length} jours de donn√©es g√©n√©r√©es\n');

    // 2. Afficher quelques exemples de donn√©es
    print('üìã Exemples de donn√©es:');
    for (int i = 0; i < 3; i++) {
      final day = testData[i];
      print('Jour ${i + 1}:');
      print('  - Stress: ${day['stressLevel']}/100');
      print('  - Sommeil: ${day['sleepQuality']}/100');
      print(
          '  - Bouff√©es: ${day['hotFlashes']['frequency']}x (intensit√©: ${day['hotFlashes']['intensity']})');
      print(
          '  - Humeur: ${day['mood']['stabilityScore']}/100 (sautes: ${day['mood']['moodSwings']})');
      print('');
    }

    // 3. Analyser les donn√©es avec Gemini
    print('ü§ñ Analyse avec Gemini...');
    try {
      final analysisResult = await service.analyzeCycleData(testData);

      print('‚úÖ Analyse termin√©e!\n');
      print('üìà R√©sultats de l\'analyse hebdomadaire:');
      print('  - Stress: ${analysisResult['stress']?.toStringAsFixed(1)}%');
      print('  - Sommeil: ${analysisResult['sleep']?.toStringAsFixed(1)}%');
      print(
          '  - Bouff√©es de chaleur: ${analysisResult['hotFlashes']?.toStringAsFixed(1)}%');
      print(
          '  - Stabilit√© de l\'humeur: ${analysisResult['moodStability']?.toStringAsFixed(1)}%');

      // 4. Interpr√©ter les r√©sultats
      print('\nüí° Interpr√©tation:');
      _interpretResults(analysisResult);
    } catch (e) {
      print('‚ùå Erreur lors de l\'analyse: $e');
      print('üîÑ Utilisation de l\'analyse locale de fallback...');

      final fallbackResult = await service.analyzeCycleData(testData);
      print('‚úÖ Analyse locale termin√©e:');
      print('  - Stress: ${fallbackResult['stress']?.toStringAsFixed(1)}%');
      print('  - Sommeil: ${fallbackResult['sleep']?.toStringAsFixed(1)}%');
      print(
          '  - Bouff√©es de chaleur: ${fallbackResult['hotFlashes']?.toStringAsFixed(1)}%');
      print(
          '  - Stabilit√© de l\'humeur: ${fallbackResult['moodStability']?.toStringAsFixed(1)}%');
    }
  }

  /// Interpr√©ter les r√©sultats de l'analyse
  static void _interpretResults(Map<String, double> results) {
    print('');

    // Stress
    final stress = results['stress'] ?? 0;
    if (stress < -5) {
      print(
          'üéâ Excellent! Votre niveau de stress a diminu√© de ${stress.abs().toStringAsFixed(1)}%');
    } else if (stress > 5) {
      print(
          '‚ö†Ô∏è Attention: Votre niveau de stress a augment√© de ${stress.toStringAsFixed(1)}%');
    } else {
      print(
          '‚úÖ Votre niveau de stress est stable (variation: ${stress.toStringAsFixed(1)}%)');
    }

    // Sommeil
    final sleep = results['sleep'] ?? 0;
    if (sleep > 5) {
      print(
          'üò¥ Am√©lioration! Votre qualit√© de sommeil a augment√© de ${sleep.toStringAsFixed(1)}%');
    } else if (sleep < -5) {
      print(
          'üò¥ D√©gradation: Votre qualit√© de sommeil a diminu√© de ${sleep.abs().toStringAsFixed(1)}%');
    } else {
      print(
          'üò¥ Votre qualit√© de sommeil est stable (variation: ${sleep.toStringAsFixed(1)}%)');
    }

    // Bouff√©es de chaleur
    final hotFlashes = results['hotFlashes'] ?? 0;
    if (hotFlashes < -5) {
      print(
          'üî• R√©duction! Vos bouff√©es de chaleur ont diminu√© de ${hotFlashes.abs().toStringAsFixed(1)}%');
    } else if (hotFlashes > 5) {
      print(
          'üî• Augmentation: Vos bouff√©es de chaleur ont augment√© de ${hotFlashes.toStringAsFixed(1)}%');
    } else {
      print(
          'üî• Vos bouff√©es de chaleur sont stables (variation: ${hotFlashes.toStringAsFixed(1)}%)');
    }

    // Humeur
    final moodStability = results['moodStability'] ?? 0;
    if (moodStability > 5) {
      print(
          'üòä Am√©lioration! Votre stabilit√© d\'humeur a augment√© de ${moodStability.toStringAsFixed(1)}%');
    } else if (moodStability < -5) {
      print(
          'üòî D√©gradation: Votre stabilit√© d\'humeur a diminu√© de ${moodStability.abs().toStringAsFixed(1)}%');
    } else {
      print(
          'üòä Votre stabilit√© d\'humeur est stable (variation: ${moodStability.toStringAsFixed(1)}%)');
    }
  }

  /// Exemple avec des donn√©es personnalis√©es
  static Future<void> demonstrateWithCustomData() async {
    print('\nüîß D√©monstration avec des donn√©es personnalis√©es\n');

    final service = CycleAnalysisService();

    // Cr√©er des donn√©es personnalis√©es pour simuler une am√©lioration
    final customData = [
      // Semaine pr√©c√©dente (jours 1-7) - donn√©es plus mauvaises
      for (int i = 6; i >= 0; i--)
        {
          'date':
              DateTime.now().subtract(Duration(days: i + 7)).toIso8601String(),
          'stressLevel': 80, // Stress √©lev√©
          'sleepQuality': 50, // Sommeil m√©diocre
          'hotFlashes': {
            'frequency': 8, // Beaucoup de bouff√©es
            'intensity': 4.0, // Intensit√© √©lev√©e
          },
          'mood': {
            'stabilityScore': 40, // Humeur instable
            'moodSwings': true, // Sautes d'humeur
          },
        },
      // Semaine courante (jours 8-14) - donn√©es meilleures
      for (int i = 6; i >= 0; i--)
        {
          'date': DateTime.now().subtract(Duration(days: i)).toIso8601String(),
          'stressLevel': 50, // Stress r√©duit
          'sleepQuality': 80, // Meilleur sommeil
          'hotFlashes': {
            'frequency': 3, // Moins de bouff√©es
            'intensity': 2.5, // Intensit√© r√©duite
          },
          'mood': {
            'stabilityScore': 75, // Humeur plus stable
            'moodSwings': false, // Pas de sautes d'humeur
          },
        },
    ];

    print('üìä Analyse de donn√©es personnalis√©es (am√©lioration simul√©e)...');
    final result = await service.analyzeCycleData(customData);

    print('‚úÖ R√©sultats:');
    print(
        '  - Stress: ${result['stress']?.toStringAsFixed(1)}% (attendu: n√©gatif)');
    print(
        '  - Sommeil: ${result['sleep']?.toStringAsFixed(1)}% (attendu: positif)');
    print(
        '  - Bouff√©es de chaleur: ${result['hotFlashes']?.toStringAsFixed(1)}% (attendu: n√©gatif)');
    print(
        '  - Stabilit√© de l\'humeur: ${result['moodStability']?.toStringAsFixed(1)}% (attendu: positif)');

    _interpretResults(result);
  }
}

/// Fonction principale pour ex√©cuter les exemples
Future<void> main() async {
  await CycleAnalysisExample.demonstrateAnalysis();
  await CycleAnalysisExample.demonstrateWithCustomData();
}
